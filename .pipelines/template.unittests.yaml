stages:
- stage: unittest
  displayName: ACN UnitTests
  dependsOn:
    - setup
  variables:
    STORAGE_ID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
  jobs:
  - job: acn_linux
    displayName: Test ACN Linux
    pool:
      type: windows
      isCustom: true
      name: $(BUILD_POOL_NAME_DEFAULT)
    steps:
    - script: |
        make tools
        # run test, echo exit status code to fd 3, pipe output from test to tee, which splits output to stdout and go-junit-report (which converts test output to report.xml), stdout from tee is redirected to fd 4. Take output written to fd 3 (which is the exit code of test), redirect to stdout, pipe to read from stdout then exit with that status code. Read all output from fd 4 (output from tee) and write to top stdout
        { { { {
              sudo -E env "PATH=$PATH" make test-all;
              echo $? >&3;
              } | tee >(build/tools/bin/go-junit-report > report.xml) >&4;
            } 3>&1;
          } | { read xs; exit $xs; }
        } 4>&1
      retryCountOnTaskFailure: 3
      displayName: "Run Tests"

    - task: CopyFiles@2
      inputs:
        contents: report.xml
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishPipelineArtifact@1
      inputs:
        artifact: drop_unittest_acn_linux
        targetPath: $(Build.ArtifactStagingDirectory)
        publishLocation: pipeline

  - job:
    displayName: Test ACN Windows
    pool:
      type: windows
      isCustom: true
      name: $(BUILD_POOL_NAME_DEFAULT_WINDOWS_ALT)
    steps:
      - script: |
          cd npm/
          go test ./...
        retryCountOnTaskFailure: 3
        displayName: "Run Tests"
