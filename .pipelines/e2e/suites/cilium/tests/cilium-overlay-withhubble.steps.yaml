parameters:
- name: cluster_name
  type: string

- name: subscription
  type: string

steps:
- template: /.pipelines/toolset/k8s/install-kubectl.steps.yaml
  parameters:
    cluster_name: ${{ parameters.cluster_name }}
    subscription: ${{ parameters.subscription }}

- bash: |
    go version
    go env
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: "Set up the Go environment"

- task: AzureCLI@2
  inputs:
    azureSubscription: ${{ parameters.subscription }}
    scriptLocation: "inlineScript"
    scriptType: "bash"
    addSpnToEnvironment: true
    inlineScript: |
      set -e
      make -C ./hack/aks set-kubeconf AZCLI=az
      ls -lah
      export CILIUM_VERSION_TAG=${CILIUM_HUBBLE_VERSION_TAG}
      export DIR=${CILIUM_VERSION_TAG%.*}
      echo "installing files from ${DIR}"
      kubectl apply -f test/integration/manifests/cilium/v${DIR}/cilium-config/cilium-config-hubble.yaml
      kubectl apply -f test/integration/manifests/cilium/v${DIR}/cilium-agent/files
      kubectl apply -f test/integration/manifests/cilium/v${DIR}/cilium-operator/files
      envsubst '${CILIUM_IMAGE_REGISTRY},${CILIUM_VERSION_TAG}' < test/integration/manifests/cilium/v${DIR}/cilium-agent/templates/daemonset.yaml | kubectl apply -f -
      envsubst '${CILIUM_IMAGE_REGISTRY},${CILIUM_VERSION_TAG}' < test/integration/manifests/cilium/v${DIR}/cilium-operator/templates/deployment.yaml | kubectl apply -f -
      # Use different file directories for nightly and current cilium version
  displayName: "Install Cilium on AKS Overlay"
  env:
    CLUSTER: ${{ parameters.cluster_name }}

- template: /.pipelines/toolset/cilium/install-cli.steps.yaml

- script: |
    echo "Start Azilium E2E Tests on Overlay Cluster"
    if [ "$CILIUM_VERSION_TAG" = "cilium-nightly-pipeline" ]
    then
        CNS=$(CNS_VERSION) IPAM=$(AZURE_IPAM_VERSION) && echo "Running nightly"
    else
        CNS=$(make cns-version) IPAM=$(make azure-ipam-version)
    fi
    sudo -E env "PATH=$PATH" make test-load SCALE_UP=32 OS_TYPE=linux VALIDATE_STATEFILE=true INSTALL_CNS=true INSTALL_OVERLAY=true AZURE_IPAM_VERSION=${IPAM} CNS_VERSION=${CNS} CLEANUP=true
  retryCountOnTaskFailure: 3
  displayName: "Run Azilium E2E on AKS Overlay"

- script: |
    kubectl get pods -A
    echo "Waiting < 2 minutes for cilium to be ready"
    # Ensure Cilium is ready Xm\Xs
    cilium status --wait --wait-duration 2m
  retryCountOnTaskFailure: 3
  displayName: "Cilium Status"

- script: |
    echo "Run Cilium Connectivity Tests"
    cilium status
    cilium connectivity test --connect-timeout 4s --request-timeout 30s --test '!pod-to-pod-encryption,!node-to-node-encryption'
  retryCountOnTaskFailure: 3
  displayName: "Run Cilium Connectivity Tests"

- script: |
    echo "enable Hubble metrics server"
    kubectl apply -f test/integration/manifests/cilium/hubble/hubble-peer-svc.yaml
    kubectl apply -f test/integration/manifests/cilium/v1.14.4/cilium-config/cilium-config-hubble.yaml
    kubectl rollout restart ds cilium -n kube-system
    echo "wait <3 minutes for pods to be ready after restart"
    kubectl rollout status ds cilium -n kube-system --timeout=3m
    kubectl get pods -Aowide
    echo "verify Hubble metrics endpoint is usable"
    go test ./test/integration/networkobservability -v -tags=networkobservability
  retryCountOnTaskFailure: 3
  displayName: "Run Hubble Connectivity Tests"

- script: |
    echo "validate pod IP assignment and check systemd-networkd restart"
    kubectl get pod -owide -A
    # Deleting echo-external-node deployment until cilium version matches TODO. https://github.com/cilium/cilium-cli/issues/67 is addressing the change.
    # Saves 17 minutes
    kubectl delete deploy -n cilium-test echo-external-node
    if [ "$CILIUM_VERSION_TAG" = "cilium-nightly-pipeline" ]; then
      echo "Check cilium identities in cilium-test namepsace during nightly run"
      echo "expect the identities to be deleted when the namespace is deleted"
      kubectl get ciliumidentity | grep cilium-test
    fi
    make test-validate-state
    echo "delete cilium connectivity test resources and re-validate state"
    kubectl delete ns cilium-test
    kubectl get pod -owide -A
    make test-validate-state
  displayName: "Validate Pods"

- script: |
    if [ "$CILIUM_VERSION_TAG" = "cilium-nightly-pipeline" ]; then
      kubectl get pod -owide -n cilium-test
      echo "wait for pod and cilium identity deletion in cilium-test namespace"
      ns="cilium-test"
      while true; do
        pods=$(kubectl get pods -n $ns --no-headers=true 2>/dev/null)
        if [[ -z "$pods" ]]; then
          echo "No pods found"
            break
        fi
        sleep 2s
      done
      sleep 20s
      echo "Verify cilium identities are deleted from cilium-test"
      checkIdentity="$(kubectl get ciliumidentity -o json | grep cilium-test | jq -e 'length == 0')"
      if [[ -n $checkIdentity ]]; then
        echo "##[error]Cilium Identities still present in cilium-test namespace"
      else
        printf -- "Identities deleted from cilium-test namespace\n"
      fi
    else
      echo "skip cilium identities check for PR pipeline"
    fi
  displayName: "Verify Cilium Identities Deletion"

- script: |
    echo "Run wireserver and metadata connectivity Tests"
    bash test/network/wireserver_metadata_test.sh
  retryCountOnTaskFailure: 3
  displayName: "Run Wireserver and Metadata Connectivity Tests"

- script: |
    cd hack/scripts
    chmod +x async-delete-test.sh
    ./async-delete-test.sh
    if ! [ -z $(kubectl -n kube-system get ds  azure-cns | grep non-existing) ]; then
      kubectl -n kube-system patch daemonset azure-cns --type json -p='[{"op": "remove", "path": "/spec/template/spec/nodeSelector/non-existing"}]'
    fi
  displayName: "Verify Async Delete when CNS is down"

- script: |
    ARTIFACT_DIR=$(Build.ArtifactStagingDirectory)/test-output/
    echo $ARTIFACT_DIR
    sudo rm -rf $ARTIFACT_DIR
    sudo rm -rf test/integration/logs
  displayName: "Cleanup artifact dir"
  condition: always()
